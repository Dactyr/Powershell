mkdir "C:\Temp\UUSC\UUSC Output\names" -ErrorAction SilentlyContinue

$namepath = "C:\Temp\UUSC\UUSC Output\names"

#####################################
## This Section Configures logging ##
#####################################

if (([System.Diagnostics.EventLog]::SourceExists("UUSC") -ne "True"))
    {
    New-EventLog -Source "UUSC" -LogName "UUSCF"
    Write-Verbose "Configuring Logging..." -Verbose
    }

#####################################################################################
## This Section Gathers All Computer Names in Active Directory Into reference File ##
#####################################################################################

Workflow Get-CompNames
{
  param ($namepath)
    $comps = Get-ADComputer -Filter {Name -notlike "*Local*"} -Property "name"
    $comps = $comps.name
    $compcp = @()
    $fcompcp = @()

    foreach -parallel ($comp in $comps)
    {
        If(test-connection -computername $comp -Count 2 -ErrorAction SilentlyContinue)
        {
            $WORKFLOW:compcp +=($comp)
        }

        Else
        {
            $fhst = $comp
            $WORKFLOW:fcompcp +=($fhst)
        }
    }
    out-file -InputObject $fcompcp -filepath "$namepath\FWKSname.csv" -Force -NoClobber
    out-file -InputObject $compcp -filePath "$namepath\WKSname.csv" -Force -NoClobber
} -ArgumentList ($namepath)
Get-CompNames

########################################################################################
## Using Computername Reference File, This Section Gathers All Required Hardware Data ##
########################################################################################

$comps = Get-content -Path "$namepath\WKSname.csv"
Try{
      foreach ($comp in $comps)
      {
        $ComputerSystemInfo = Get-WmiObject -Class Win32_ComputerSystem -ComputerName $comp

        if($ComputerSystemInfo | Where-Object -Property model -eq "*VMware*")
        {
          $Free = (Get-PSDrive C) #Set drive information to variable
          $Free = ($Free.free/1GB) #Get free space and divide by 1 gigabyte
          $Free = ([math]::Round($Free,2)) #Round free space to two decimal places
          $Free

          if ($Free -lt 10)
          {
            $Drive2Expand ='C' #Change to the NTFS drive letter you want to expand
            $VirtDiskNum = (Get-Disk |Where-Object IsBoot -eq Yes) #Get disk number of default hyper-v boot drive but change if expanding a secondary or non-boot drive
            $PartitionNum = (Get-Partition -DriveLetter $Drive2Expand) #Get the partition number for drive c
            Update-Disk -Number $VirtDiskNum.number
            $PartSize = (Get-PartitionSupportedSize -DiskNumber $VirtDiskNum.number -PartitionNumber $PartitionNum.PartitionNumber) #Get partition info for drive c
            Resize-Partition -PartitionNumber $PartitionNum.PartitionNumber -Size $PartSize.SizeMax -DiskNumber $VirtDiskNum.number #Expand drive C using all unallocated space available]

            $Free = (Get-PSDrive C) #Set drive information to variable
            $Free = ($Free.free/1GB) #Get free space and divide by 1 gigabyte
            $Free = ([math]::Round($Free,2)) #Round free space to two decimal places
            $Free
          }
        }
        Else
        {
          Write-Host "System Drive C on VM $comp has $Free GB of free space for patches"
        }
      }
    }
    Catch {
    Write-Verbose "That's an error! Check UUSCF in event viewer..." -Verbose
    Write-EventLog -Source "UUSC" -LogName "UUSCF" -EventId 1002 -EntryType Information -Message "Error: $($_.Exception.Message)" -Category 1 -RawData 10,20
  }
